import { ElementRef, QueryList } from '@angular/core';
import { Subscription } from 'rxjs/Subscription';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/publishBehavior';
import 'rxjs/add/operator/distinctUntilChanged';
import { ObservableComponent } from '../core/index';
import { ButtonStateContentDirective } from './button-state-content.directive';
export declare class ButtonComponent extends ObservableComponent {
    private elementRef;
    pressed: boolean;
    focused: boolean;
    hovered: boolean;
    readonly isDisabled: boolean | null;
    selected: boolean;
    title: string;
    disabled: boolean;
    disableA11yClick: boolean;
    busy: boolean;
    flexLabel: boolean;
    label: string;
    prepIcon: string;
    autoBlur: boolean;
    appIcon: string;
    appIconSrc: string;
    prepIconSrc: string;
    private pressEvent;
    readonly press: Observable<any>;
    stateChange: Observable<"enabled" | "disabled" | "busy">;
    readonly state: 'busy' | 'disabled' | 'enabled';
    buttonContent: QueryList<ButtonStateContentDirective>;
    pressSub: Subscription;
    stateSub: Subscription;
    constructor(elementRef: ElementRef);
    onKeypress(ev: KeyboardEvent): void;
    onMouseEnter(e: any): void;
    onMouseLeave(e: any): void;
    onMouseUp(e: any): void;
    onMouseDown(e: any): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    onClick(e: any): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
}
