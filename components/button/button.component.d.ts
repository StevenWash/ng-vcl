import { Subscription } from 'rxjs/Subscription';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/publishBehavior';
import { ElementRef, TemplateRef, ViewContainerRef, QueryList } from '@angular/core';
import { ObservableComponent } from '../../core/index';
export declare class ButtonContentDirective {
    private viewContainerRef;
    private tempRef;
    constructor(viewContainerRef: ViewContainerRef, tempRef: TemplateRef<any>);
    private hasView;
    state: string;
    render(state: string): void;
}
export declare class ButtonComponent extends ObservableComponent {
    private elementRef;
    private latestInteractionTime;
    private latestInteractionType;
    pressed: boolean;
    focused: boolean;
    hovered: boolean;
    selected: boolean;
    title: string;
    disabled: boolean;
    disableA11yClick: boolean;
    readonly isDisabled: boolean;
    busy: boolean;
    flexLabel: boolean;
    busyLabel: string;
    label: string;
    prepIcon: string;
    prepIconBusy: string;
    autoBlur: boolean;
    appIcon: string;
    appIconBusy: string;
    private _press;
    readonly press: Observable<any>;
    private _stateChange;
    readonly stateChange: Observable<string>;
    readonly state: string;
    state$: Observable<string>;
    label$: Observable<string>;
    prepIcon$: Observable<string>;
    appIcon$: Observable<string>;
    buttonContent: QueryList<ButtonContentDirective>;
    stateSub: Subscription;
    pressSub: Subscription;
    constructor(elementRef: ElementRef);
    onKeypress(ev: KeyboardEvent): void;
    onMouseEnter(e: any): void;
    onMouseLeave(e: any): void;
    onMouseUp(e: any): void;
    onMouseDown(e: any): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    onTap(e: any): void;
    onClick(e: any): void;
    private handleGhostClick(type, e);
    ngAfterViewInit(): void;
    ngOnDestoy(): void;
}
